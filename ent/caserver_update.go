// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-board/ent/caserver"
	"github.com/go-board/ent/predicate"
	"github.com/go-board/ent/user"
)

// CaServerUpdate is the builder for updating CaServer entities.
type CaServerUpdate struct {
	config
	hooks    []Hook
	mutation *CaServerMutation
}

// Where appends a list predicates to the CaServerUpdate builder.
func (csu *CaServerUpdate) Where(ps ...predicate.CaServer) *CaServerUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetName sets the "name" field.
func (csu *CaServerUpdate) SetName(s string) *CaServerUpdate {
	csu.mutation.SetName(s)
	return csu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (csu *CaServerUpdate) SetNillableName(s *string) *CaServerUpdate {
	if s != nil {
		csu.SetName(*s)
	}
	return csu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csu *CaServerUpdate) SetUserID(id int) *CaServerUpdate {
	csu.mutation.SetUserID(id)
	return csu
}

// SetUser sets the "user" edge to the User entity.
func (csu *CaServerUpdate) SetUser(u *User) *CaServerUpdate {
	return csu.SetUserID(u.ID)
}

// Mutation returns the CaServerMutation object of the builder.
func (csu *CaServerUpdate) Mutation() *CaServerMutation {
	return csu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (csu *CaServerUpdate) ClearUser() *CaServerUpdate {
	csu.mutation.ClearUser()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CaServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CaServerUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CaServerUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CaServerUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CaServerUpdate) check() error {
	if v, ok := csu.mutation.Name(); ok {
		if err := caserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CaServer.name": %w`, err)}
		}
	}
	if _, ok := csu.mutation.UserID(); csu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CaServer.user"`)
	}
	return nil
}

func (csu *CaServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(caserver.Table, caserver.Columns, sqlgraph.NewFieldSpec(caserver.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Name(); ok {
		_spec.SetField(caserver.FieldName, field.TypeString, value)
	}
	if csu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   caserver.UserTable,
			Columns: []string{caserver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   caserver.UserTable,
			Columns: []string{caserver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CaServerUpdateOne is the builder for updating a single CaServer entity.
type CaServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CaServerMutation
}

// SetName sets the "name" field.
func (csuo *CaServerUpdateOne) SetName(s string) *CaServerUpdateOne {
	csuo.mutation.SetName(s)
	return csuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (csuo *CaServerUpdateOne) SetNillableName(s *string) *CaServerUpdateOne {
	if s != nil {
		csuo.SetName(*s)
	}
	return csuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csuo *CaServerUpdateOne) SetUserID(id int) *CaServerUpdateOne {
	csuo.mutation.SetUserID(id)
	return csuo
}

// SetUser sets the "user" edge to the User entity.
func (csuo *CaServerUpdateOne) SetUser(u *User) *CaServerUpdateOne {
	return csuo.SetUserID(u.ID)
}

// Mutation returns the CaServerMutation object of the builder.
func (csuo *CaServerUpdateOne) Mutation() *CaServerMutation {
	return csuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (csuo *CaServerUpdateOne) ClearUser() *CaServerUpdateOne {
	csuo.mutation.ClearUser()
	return csuo
}

// Where appends a list predicates to the CaServerUpdate builder.
func (csuo *CaServerUpdateOne) Where(ps ...predicate.CaServer) *CaServerUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CaServerUpdateOne) Select(field string, fields ...string) *CaServerUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CaServer entity.
func (csuo *CaServerUpdateOne) Save(ctx context.Context) (*CaServer, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CaServerUpdateOne) SaveX(ctx context.Context) *CaServer {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CaServerUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CaServerUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CaServerUpdateOne) check() error {
	if v, ok := csuo.mutation.Name(); ok {
		if err := caserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CaServer.name": %w`, err)}
		}
	}
	if _, ok := csuo.mutation.UserID(); csuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CaServer.user"`)
	}
	return nil
}

func (csuo *CaServerUpdateOne) sqlSave(ctx context.Context) (_node *CaServer, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(caserver.Table, caserver.Columns, sqlgraph.NewFieldSpec(caserver.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CaServer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, caserver.FieldID)
		for _, f := range fields {
			if !caserver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != caserver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Name(); ok {
		_spec.SetField(caserver.FieldName, field.TypeString, value)
	}
	if csuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   caserver.UserTable,
			Columns: []string{caserver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   caserver.UserTable,
			Columns: []string{caserver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CaServer{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
