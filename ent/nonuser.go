// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-board/ent/nonuser"
)

// NonUser is the model entity for the NonUser schema.
type NonUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Password holds the value of the "password" field.
	Password []byte `json:"password,omitempty"`
	// Tel holds the value of the "tel" field.
	Tel string `json:"tel,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate  time.Time `json:"created_date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NonUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nonuser.FieldPassword:
			values[i] = new([]byte)
		case nonuser.FieldID:
			values[i] = new(sql.NullInt64)
		case nonuser.FieldName, nonuser.FieldTel, nonuser.FieldDescription:
			values[i] = new(sql.NullString)
		case nonuser.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NonUser fields.
func (nu *NonUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nonuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nu.ID = int(value.Int64)
		case nonuser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				nu.Name = value.String
			}
		case nonuser.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				nu.Password = *value
			}
		case nonuser.FieldTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel", values[i])
			} else if value.Valid {
				nu.Tel = value.String
			}
		case nonuser.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				nu.Description = value.String
			}
		case nonuser.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				nu.CreatedDate = value.Time
			}
		default:
			nu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NonUser.
// This includes values selected through modifiers, order, etc.
func (nu *NonUser) Value(name string) (ent.Value, error) {
	return nu.selectValues.Get(name)
}

// Update returns a builder for updating this NonUser.
// Note that you need to call NonUser.Unwrap() before calling this method if this NonUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (nu *NonUser) Update() *NonUserUpdateOne {
	return NewNonUserClient(nu.config).UpdateOne(nu)
}

// Unwrap unwraps the NonUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nu *NonUser) Unwrap() *NonUser {
	_tx, ok := nu.config.driver.(*txDriver)
	if !ok {
		panic("ent: NonUser is not a transactional entity")
	}
	nu.config.driver = _tx.drv
	return nu
}

// String implements the fmt.Stringer.
func (nu *NonUser) String() string {
	var builder strings.Builder
	builder.WriteString("NonUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nu.ID))
	builder.WriteString("name=")
	builder.WriteString(nu.Name)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(fmt.Sprintf("%v", nu.Password))
	builder.WriteString(", ")
	builder.WriteString("tel=")
	builder.WriteString(nu.Tel)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(nu.Description)
	builder.WriteString(", ")
	builder.WriteString("created_date=")
	builder.WriteString(nu.CreatedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NonUsers is a parsable slice of NonUser.
type NonUsers []*NonUser
