// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-board/ent/nonuser"
	"github.com/go-board/ent/predicate"
)

// NonUserUpdate is the builder for updating NonUser entities.
type NonUserUpdate struct {
	config
	hooks    []Hook
	mutation *NonUserMutation
}

// Where appends a list predicates to the NonUserUpdate builder.
func (nuu *NonUserUpdate) Where(ps ...predicate.NonUser) *NonUserUpdate {
	nuu.mutation.Where(ps...)
	return nuu
}

// SetName sets the "name" field.
func (nuu *NonUserUpdate) SetName(s string) *NonUserUpdate {
	nuu.mutation.SetName(s)
	return nuu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuu *NonUserUpdate) SetNillableName(s *string) *NonUserUpdate {
	if s != nil {
		nuu.SetName(*s)
	}
	return nuu
}

// SetPassword sets the "password" field.
func (nuu *NonUserUpdate) SetPassword(b []byte) *NonUserUpdate {
	nuu.mutation.SetPassword(b)
	return nuu
}

// SetTel sets the "tel" field.
func (nuu *NonUserUpdate) SetTel(s string) *NonUserUpdate {
	nuu.mutation.SetTel(s)
	return nuu
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (nuu *NonUserUpdate) SetNillableTel(s *string) *NonUserUpdate {
	if s != nil {
		nuu.SetTel(*s)
	}
	return nuu
}

// SetDescription sets the "description" field.
func (nuu *NonUserUpdate) SetDescription(s string) *NonUserUpdate {
	nuu.mutation.SetDescription(s)
	return nuu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuu *NonUserUpdate) SetNillableDescription(s *string) *NonUserUpdate {
	if s != nil {
		nuu.SetDescription(*s)
	}
	return nuu
}

// SetCreatedDate sets the "created_date" field.
func (nuu *NonUserUpdate) SetCreatedDate(t time.Time) *NonUserUpdate {
	nuu.mutation.SetCreatedDate(t)
	return nuu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (nuu *NonUserUpdate) SetNillableCreatedDate(t *time.Time) *NonUserUpdate {
	if t != nil {
		nuu.SetCreatedDate(*t)
	}
	return nuu
}

// Mutation returns the NonUserMutation object of the builder.
func (nuu *NonUserUpdate) Mutation() *NonUserMutation {
	return nuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nuu *NonUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nuu.sqlSave, nuu.mutation, nuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuu *NonUserUpdate) SaveX(ctx context.Context) int {
	affected, err := nuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nuu *NonUserUpdate) Exec(ctx context.Context) error {
	_, err := nuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuu *NonUserUpdate) ExecX(ctx context.Context) {
	if err := nuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuu *NonUserUpdate) check() error {
	if v, ok := nuu.mutation.Name(); ok {
		if err := nonuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NonUser.name": %w`, err)}
		}
	}
	if v, ok := nuu.mutation.Password(); ok {
		if err := nonuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "NonUser.password": %w`, err)}
		}
	}
	if v, ok := nuu.mutation.Tel(); ok {
		if err := nonuser.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf(`ent: validator failed for field "NonUser.tel": %w`, err)}
		}
	}
	return nil
}

func (nuu *NonUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(nonuser.Table, nonuser.Columns, sqlgraph.NewFieldSpec(nonuser.FieldID, field.TypeInt))
	if ps := nuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuu.mutation.Name(); ok {
		_spec.SetField(nonuser.FieldName, field.TypeString, value)
	}
	if value, ok := nuu.mutation.Password(); ok {
		_spec.SetField(nonuser.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := nuu.mutation.Tel(); ok {
		_spec.SetField(nonuser.FieldTel, field.TypeString, value)
	}
	if value, ok := nuu.mutation.Description(); ok {
		_spec.SetField(nonuser.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuu.mutation.CreatedDate(); ok {
		_spec.SetField(nonuser.FieldCreatedDate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nonuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nuu.mutation.done = true
	return n, nil
}

// NonUserUpdateOne is the builder for updating a single NonUser entity.
type NonUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NonUserMutation
}

// SetName sets the "name" field.
func (nuuo *NonUserUpdateOne) SetName(s string) *NonUserUpdateOne {
	nuuo.mutation.SetName(s)
	return nuuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuuo *NonUserUpdateOne) SetNillableName(s *string) *NonUserUpdateOne {
	if s != nil {
		nuuo.SetName(*s)
	}
	return nuuo
}

// SetPassword sets the "password" field.
func (nuuo *NonUserUpdateOne) SetPassword(b []byte) *NonUserUpdateOne {
	nuuo.mutation.SetPassword(b)
	return nuuo
}

// SetTel sets the "tel" field.
func (nuuo *NonUserUpdateOne) SetTel(s string) *NonUserUpdateOne {
	nuuo.mutation.SetTel(s)
	return nuuo
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (nuuo *NonUserUpdateOne) SetNillableTel(s *string) *NonUserUpdateOne {
	if s != nil {
		nuuo.SetTel(*s)
	}
	return nuuo
}

// SetDescription sets the "description" field.
func (nuuo *NonUserUpdateOne) SetDescription(s string) *NonUserUpdateOne {
	nuuo.mutation.SetDescription(s)
	return nuuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuuo *NonUserUpdateOne) SetNillableDescription(s *string) *NonUserUpdateOne {
	if s != nil {
		nuuo.SetDescription(*s)
	}
	return nuuo
}

// SetCreatedDate sets the "created_date" field.
func (nuuo *NonUserUpdateOne) SetCreatedDate(t time.Time) *NonUserUpdateOne {
	nuuo.mutation.SetCreatedDate(t)
	return nuuo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (nuuo *NonUserUpdateOne) SetNillableCreatedDate(t *time.Time) *NonUserUpdateOne {
	if t != nil {
		nuuo.SetCreatedDate(*t)
	}
	return nuuo
}

// Mutation returns the NonUserMutation object of the builder.
func (nuuo *NonUserUpdateOne) Mutation() *NonUserMutation {
	return nuuo.mutation
}

// Where appends a list predicates to the NonUserUpdate builder.
func (nuuo *NonUserUpdateOne) Where(ps ...predicate.NonUser) *NonUserUpdateOne {
	nuuo.mutation.Where(ps...)
	return nuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuuo *NonUserUpdateOne) Select(field string, fields ...string) *NonUserUpdateOne {
	nuuo.fields = append([]string{field}, fields...)
	return nuuo
}

// Save executes the query and returns the updated NonUser entity.
func (nuuo *NonUserUpdateOne) Save(ctx context.Context) (*NonUser, error) {
	return withHooks(ctx, nuuo.sqlSave, nuuo.mutation, nuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuuo *NonUserUpdateOne) SaveX(ctx context.Context) *NonUser {
	node, err := nuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuuo *NonUserUpdateOne) Exec(ctx context.Context) error {
	_, err := nuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuuo *NonUserUpdateOne) ExecX(ctx context.Context) {
	if err := nuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuuo *NonUserUpdateOne) check() error {
	if v, ok := nuuo.mutation.Name(); ok {
		if err := nonuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NonUser.name": %w`, err)}
		}
	}
	if v, ok := nuuo.mutation.Password(); ok {
		if err := nonuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "NonUser.password": %w`, err)}
		}
	}
	if v, ok := nuuo.mutation.Tel(); ok {
		if err := nonuser.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf(`ent: validator failed for field "NonUser.tel": %w`, err)}
		}
	}
	return nil
}

func (nuuo *NonUserUpdateOne) sqlSave(ctx context.Context) (_node *NonUser, err error) {
	if err := nuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nonuser.Table, nonuser.Columns, sqlgraph.NewFieldSpec(nonuser.FieldID, field.TypeInt))
	id, ok := nuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NonUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nonuser.FieldID)
		for _, f := range fields {
			if !nonuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nonuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuuo.mutation.Name(); ok {
		_spec.SetField(nonuser.FieldName, field.TypeString, value)
	}
	if value, ok := nuuo.mutation.Password(); ok {
		_spec.SetField(nonuser.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := nuuo.mutation.Tel(); ok {
		_spec.SetField(nonuser.FieldTel, field.TypeString, value)
	}
	if value, ok := nuuo.mutation.Description(); ok {
		_spec.SetField(nonuser.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuuo.mutation.CreatedDate(); ok {
		_spec.SetField(nonuser.FieldCreatedDate, field.TypeTime, value)
	}
	_node = &NonUser{config: nuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nonuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuuo.mutation.done = true
	return _node, nil
}
