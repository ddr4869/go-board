// Code generated by ent, DO NOT EDIT.

package payment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the payment type in the database.
	Label = "payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldGrade holds the string denoting the grade field in the database.
	FieldGrade = "grade"
	// FieldMovieID holds the string denoting the movie_id field in the database.
	FieldMovieID = "movie_id"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "name"
	// Table holds the table name of the payment in the database.
	Table = "payments"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "payments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_payment"
)

// Columns holds all SQL columns for payment fields.
var Columns = []string{
	FieldID,
	FieldUserName,
	FieldGrade,
	FieldMovieID,
	FieldCreatedDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_payment",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// GradeValidator is a validator for the "grade" field. It is called by the builders before save.
	GradeValidator func(string) error
	// MovieIDValidator is a validator for the "movie_id" field. It is called by the builders before save.
	MovieIDValidator func(string) error
	// DefaultCreatedDate holds the default value on creation for the "created_date" field.
	DefaultCreatedDate time.Time
)

// OrderOption defines the ordering options for the Payment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByGrade orders the results by the grade field.
func ByGrade(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrade, opts...).ToFunc()
}

// ByMovieID orders the results by the movie_id field.
func ByMovieID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMovieID, opts...).ToFunc()
}

// ByCreatedDate orders the results by the created_date field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
